
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import static java.lang.Math.abs;
import static java.lang.Math.pow;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Shubhadeep Das
 */
public class Training extends javax.swing.JFrame {

    /**
     * Creates new form Training
     */
//K= No of clusters and T_SIZE=number of samples in the training data    
final int K=3;
final int  T_SIZE=320000;
double trainingvector[][]=new double[T_SIZE][1];
double codebook[][]=new double[K][1];
int region[]=new int[T_SIZE];
double sum[][]=new double[K][1];
int count[]=new int[K];
double square[][]=new double[K][1];
double centroid[][]=new double[K][1];
int M=1;                                 //ITERATION NUMBER
double avg_distortion_prev=1000;
    
    public Training() {
        initComponents();
        jTextArea1.append("TRAINING MODULE IS NOW ACTIVE.. PLEASE WAIT WHILE SYSTEM COLLECTS DATA.\n\n");
        jButton1.setVisible(false);
        startTraining();  //Microphone started
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("RETURN TO SERVER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(221, 221, 221))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        
        new Server().setVisible(true);
        this.dispose();
                
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Training.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Training.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Training.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Training.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Training().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void startTraining() {
          
        try{
        Thread thread=new Thread(){
          
            @Override
            public void run() {
                try{
                super.run(); //To change body of generated methods, choose Tools | Templates.
                
        Process run=Runtime.getRuntime().exec("D:\\NetBeans Projects\\AI_agent\\start.bat");
        jTextArea1.append("Microphone is on. Collecting data..\n");
         //Thread.sleep(10);
        
        
     }catch(Exception ex){System.out.println(ex);}
                 
            }
        };
       
        thread.start();
        thread.join();
       
      
       }catch(Exception ex){System.out.println(ex);}
        
         Thread thread1=new Thread(){
            @Override
            public void run() {
                super.run(); 
                clusterData();
            }
        
             
             
         
         
         };
         thread1.start();
         //thread1.join();
        
       
        
        jTextArea1.append("TRAINING IS NOW COMPLETED. CLUSTERS HAVE BEEN FORMED");
        
        
    }

    private void clusterData() {
       
 //Main Function
int i=0;
while(true)
{
File f = new File("D:\\trainingData.txt");
if(f.exists() && !f.isDirectory()) {
     jTextArea1.append("Collecting data completed!\n");
    break;
}
}
FileInputStream fstream=null;
try{
    
  
jTextArea1.append("CLUSTERING ALGO STARTED\n");
fstream = new FileInputStream("D:\\trainingData.txt");

BufferedReader br = new BufferedReader(new FileReader("D:\\trainingData.txt"));

String strLine;
int line=1;
////TAKING INPUT FROM TRAINING VECTOR SET
while (line!=T_SIZE)   {
 strLine=br.readLine();
 
  trainingvector[i][0] = abs(Double.parseDouble(strLine));
   System.out.println ( trainingvector[i][0]);
  line++;
  i++;
  
  
}

//Close the input stream
br.close();
 fstream.close();

}catch(Exception e){System.out.println(e);}

	
	//INITIALIZATION OF CODEBOOK
	codebook[0][0]=500;
        codebook[1][0]=2000;
        codebook[2][0]=5000;
	
	while(true)
	{
	    System.out.println("\n\n******************Iteration Number"+M+"*************\n\n");
                   
	//NEAREST NEIGHBOUR SELECTION RULE
	for(int p=0;p<T_SIZE;p++){
		double min=99999;
		for(int a=0;a<K;a++)
		{
			
				if(distance(codebook[a][0],trainingvector[p][0])<min)
				{
				min=distance(codebook[a][0],trainingvector[p][0]);
				
				//Classifying into regions
				region[p]=a;
			}
				
			}
              
                
                
		}
	
	//for(int i=1;i<=T_SIZE;i++)
	//printf("%d\n",region[i]);
	
	
	
	//CLASSIFICATION INTO BUCKETS
	initialization();
		
	for(int p=0;p<T_SIZE;p++){
		
		if(region[p]==0){      //Cluster 0
			
                        sum[0][0]+=trainingvector[p][0];
			square[0][0]+=pow(trainingvector[p][0],2);
			
			
		
		count[0]++;
		}
		else if(region[p]==1)   //Cluster 1
		{ 
		
		sum[1][0]=sum[1][0]+trainingvector[p][0];
		square[1][0]+=pow(trainingvector[p][0],2);
		
		
		
			count[1]++;
		}
		else if(region[p]==2)
		{
				
		sum[2][0]=sum[2][0]+trainingvector[p][0];
		square[2][0]+=pow(trainingvector[p][0],2);
			
			count[2]++;
		}
		
		
        }
        
	//TEST VALUES
		for(i=0;i<K;i++)
		{
			//printf("Count[%d]=%d \n",i,count[i]);
		for(int j=1;j<=12;j++)
		{
			//printf("square[%d][%d]=%llf\n ",i,j,square[i][j]);
		}
		//printf("\n");
		}
		
		
		
	//CENTROID CALCULATION
	
	for(i=0;i<K;i++)
	{
		
			if(count[i]!=0)
			centroid[i][0]=sum[i][0]/count[i];
			else
			centroid[i][0]=0.0;
			//printf()
		
		//printf("Count[%d]=%d\n",i,count[i]);
	}

	
	

//for(int i=1;i<=K;i++)
//printf("Count[%d]=%d\n",i,count[i]);

//Distortion Calculation
double distance=0.0,avg_distortion=0.0;
for(i=0;i<K;i++)
	{
		distance=0.0;
		
			distance=distance+square[i][0];
				//printf("distance=%lf\n",distance);
		
		if(count[i]!=0)
		avg_distortion+=distance/count[i];
		
		
		
	//printf("Distance=%lf Count=%d Average Distortion=%lf\n",distance,count[i],avg_distortion);
	
	}
	
	avg_distortion=avg_distortion/K;
	           System.out.println("Average Distortion="+avg_distortion);
	
	
	
	
	//CODEBOOK UPDATION
	System.out.println("Updated Codebook");
	for(i=0;i<K;i++)
	{
		
	if(centroid[i][0]!=0)
	codebook[i][0]=centroid[i][0];
	System.out.println(codebook[i][0]);
        
        
	}
	
	
	//CHECKING FOR THRESHOLD CONDITION
	if(abs(avg_distortion_prev-avg_distortion)<=0.000001)
	break;
	else
	avg_distortion_prev=avg_distortion;
	
	

	//ITERATION STEP
	M++;
	
}
	
	jTextArea1.append("FINAL CLUSTERS FORMED ARE: \nCluster1:"+codebook[0][0]+"\nCluster2:"+codebook[1][0]+"\nCluster3:"+codebook[2][0]);
       
        try{
        PrintWriter writer = new PrintWriter("codebook.txt", "UTF-8");
        writer.println(String.valueOf(codebook[0][0]));
         writer.println(String.valueOf(codebook[1][0]));
          writer.println(String.valueOf(codebook[2][0]));
       
        writer.close();
        }
        catch(Exception e){System.out.println(e);}
        jButton1.setVisible(true);
        
        
        
    }

 private double distance(double d, double d0) {

double dist=pow((d-d0),1);	

return abs(dist);	
        
        
        
    }

    private void initialization() {
        
        for(int i=0;i<3;i++)
		{
	    count[i]=0;
		
		sum[i][0]=0.0;
		square[i][0]=0.0;
		centroid[i][0]=0.0;
	
	}
        
        
    }
}
