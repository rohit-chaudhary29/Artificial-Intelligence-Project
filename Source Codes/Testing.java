
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import static java.lang.Math.abs;
import static java.lang.Math.pow;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Shubhadeep Das
 */
public class Testing extends javax.swing.JFrame {

    /**
     * Creates new form Testing
     */
    //K= No of clusters and T_SIZE=number of samples in the testing data
    final int  T_SIZE=160000;
    int COUNT=0,K=3;
    double trainingvector[][]=new double[T_SIZE][1];
    int region[]=new int[T_SIZE];
    int count[]=new int[K];
    double centroid;
    int MAPPEDCLUSTER=0;
    int CROSSEDTHRESHOLDOFF=0,CROSSEDTHRESHOLDON=0;   //To detect activity is ongoing or not
    String AC_STATUS="OFF";
    String LIGHT_STATUS="OFF";
    public static double compressorSpeed=0.0;
    public static boolean STOPCLIMATE=false;
    Simulator simulator;
    public Testing() {
        initComponents();
        simulator=new Simulator();
        simulator.setVisible(true);
       jTextArea1.append("ENERY EFFICIENCY MODULE IS NOW ACTIVE. MONITORING THE STATUS.\n");
        Thread thread=new Thread(){
            @Override
            public void run() {
                super.run();
                while(COUNT<=0){
                startTesting();
                    try {
                        Thread.sleep(20000);    //Start the testing module after every 1 minute
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    COUNT++;
                }
            }
        };
        thread.start();
               // switchOFF();
    }
                

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(50, 0));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("TURN OFF ENERGY EFFICIENCY");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            new Server().setVisible(true);
            simulator.dispose();
            this.dispose();        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Testing().setVisible(true);
            }
        });
    }

    private void startTesting() {
      initialization();
        File testFileExistence=new File("D:\\testingData"+COUNT+".txt");
        if(testFileExistence.exists())
           testFileExistence.delete();
       
        
        try{
        PrintWriter writer = new PrintWriter("test.bat", "UTF-8");
        writer.println("@echo off");
  
        writer.println("start /min cmd /k Recording_Module.exe 10 D:\\testingData"+COUNT+".wav D:\\testingData"+COUNT+".txt ");
        writer.println("exit");
         
       
        writer.close();
        }
        catch(Exception e){System.out.println(e);}
        
      //Thread thread =new Thread(){
        //    @Override
        //    public void run() {
          //      super.run();
               try{
            Process run=Runtime.getRuntime().exec("D:\\NetBeans Projects\\AI_agent\\test.bat");
            jTextArea1.append("\n\nRecording module activated for "+COUNT+" instance\n");
            
             
               
         //   }
      
      
    //  };
     //   thread.start();
        boolean flag=mapToCluster();
       if(flag==true){
           CROSSEDTHRESHOLDOFF++;
           CROSSEDTHRESHOLDON=0; 
       }
       else{
           CROSSEDTHRESHOLDON++;
           CROSSEDTHRESHOLDOFF=0;
       }
       if(CROSSEDTHRESHOLDOFF==1){ //If mapped to cluster 1 for three CONSEQUTIVE times
           switchOFF();
           CROSSEDTHRESHOLDOFF=0;
       }
       else if(CROSSEDTHRESHOLDON==1) //If mapped to cluster 2 or 3 for three CONSEQUTIVE times
       {
        switchON();
           CROSSEDTHRESHOLDON=0;
       }
                }catch(Exception e){System.out.println(e);}
    }

    
    //THIS FUNCTION MAPS TEST VALUES TO CLUSTERS
    private boolean mapToCluster() {
    
       
        
    while(true)
    {
        File f = new File("D:\\testingData"+COUNT+".txt");
    if(f.exists() && !f.isDirectory()) {
        System.out.println("testingData"+COUNT+"Created!");
       // jTextArea1.append("testingData"+COUNT+"Created!\n");
       
    break;
    }
    }
        
        
    
    
    //Reading Codebook
    double cluster[][]=new double[3][1];
    FileInputStream fstream=null;
            try {
                fstream = new FileInputStream("D:\\NetBeans Projects\\AI_agent\\codebook.txt");
                
                
            } catch (Exception ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }

BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
            try {
                cluster[0][0]=Double.parseDouble(br.readLine());
                cluster[1][0]=Double.parseDouble(br.readLine());
                cluster[2][0]=Double.parseDouble(br.readLine());
                System.out.println("Retrieved Clusters are: "+cluster[0][0]+" "+cluster[1][0]+" "+cluster[2][0]+
                "\n");
                  fstream.close();
                  br.close();
            } catch (IOException ex) {
                Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
            }

    
    //Retrieving testing data from generated file
   FileInputStream fstream1=null;
   BufferedReader br1=null;
        try {
           // fstream1 = new FileInputStream("D:\\testingData"+COUNT+".txt");
     
            File fileDir = new File("D:\\testingData"+COUNT+".txt");
            //br1 = new BufferedReader(
		   //new InputStreamReader(
                   //   new FileInputStream(fileDir), "UTF8"));
            
             Scanner scanner = new Scanner(fileDir,"UTF-8");

String strLine="";
int line=1,i=0;
////TAKING INPUT FROM TRAINING VECTOR SET
//while ( (strLine=br1.readLine())!=null)   {
       while ( scanner.hasNextLine())   {
            strLine=scanner.nextLine();
            //System.out.println("Error");
            trainingvector[i][0] =abs( Double.parseDouble(strLine));
            System.out.println ( trainingvector[i][0]+" LIne: "+line);
            line++;
            i++;  
  
  
}
scanner.close();
   } catch (Exception ex) {
            System.out.println(ex);
          
        }
       // try {
            jTextArea1.append("\nRead values from Captured data at instance "+COUNT+"\n");
           // br1.close();
            //fstream1.close();
            
       // } catch (IOException ex) {
            //Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
       // }
 

//Close the input stream

//Now checking mazority of our collected data falling in which cluster of our codebook

double min=99999;
for(int p=0;p<T_SIZE;p++){
    min=99999;
  
		for(int a=0;a<K;a++)
		{
			
				if(distance(cluster[a][0],trainingvector[p][0])<min)
				{
				min=distance(cluster[a][0],trainingvector[p][0]);
				
				//Classifying into regions
				region[p]=a;
                                count[a]++;
			}
				
			}
     centroid+=trainingvector[p][0];
    
}

centroid=centroid/T_SIZE;

/*jTextArea1.append("No of values mapped to Cluster 1: "+count[0]+"\n");
jTextArea1.append("No of values mapped to Cluster 2: "+count[1]+"\n");
jTextArea1.append("No of values mapped to Cluster 3: "+count[2]+"\n");*/
jTextArea1.append("Centroid of the test data:"+centroid+"\n");

min=99999;
for(int a=0;a<K;a++)
		{
			
				if(distance(cluster[a][0],centroid)<min)
				{
				min=distance(cluster[a][0],centroid);
                                System.out.println("min["+a+"]="+min);
                                //jTextArea1.append("min["+a+"]="+min+"\n");
                                MAPPEDCLUSTER=a;
				}
           
        
    }
        
        jTextArea1.append("The test data is being mapped to cluster number: "+(MAPPEDCLUSTER+1)+"\n");
        return MAPPEDCLUSTER==0;
    }
    private double distance(double d, double d0) {

        double dist=pow((d-d0),1);	
        return abs(dist);        
    }

    private void initialization() {
        
        for(int i=0;i<K;i++)
		 count[i]=0;
        
        for(int i=0;i<T_SIZE;i++)
            trainingvector[i][0]=0.0;
        
        centroid=0.0;
        }

     private void switchOFF() {
        
         //RETRIEVE AC STATUS FROM DATABASE
          try{  
    Class.forName("oracle.jdbc.driver.OracleDriver");  
      Connection con=DriverManager.getConnection(  
    "jdbc:oracle:thin:@localhost:1521:xe","system","shubha");  
      Statement userbook=con.createStatement();
    ResultSet rs=userbook.executeQuery("select * from status");
    if(rs.next()){
        AC_STATUS=rs.getString(1);
        LIGHT_STATUS=rs.getString(2);
        System.out.println(" Current LIGHT STATUS:"+LIGHT_STATUS+"\nCurrent AC STATUS:"+AC_STATUS);
        con.close();
    }     
                 
    }   catch (Exception ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        }
          jTextArea1.append("\nNO ACTIVITY DETECTED IN ROOM\n"); 
          if(LIGHT_STATUS.compareTo("ON")==0)
          {LIGHT_STATUS="OFF";
         jTextArea1.append("LIGHTS: TURNED OFF\n");  
          }
          if(AC_STATUS.compareTo("ON")==0){
                AC_STATUS="OFF";
           
           jTextArea1.append("AC STATUS: TURNED OFF\n");
           STOPCLIMATE=true;
           jTextArea1.append("Climate control turned OFF\n");
          }
           updateStatus();
     }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    //Update the status of lights and fans in the database
    private void updateStatus() {
           try{  

    Class.forName("oracle.jdbc.driver.OracleDriver");  
     Connection con=DriverManager.getConnection(  
    "jdbc:oracle:thin:@localhost:1521:xe","system","shubha");  
      Statement userbook=con.createStatement();
    ResultSet rs=userbook.executeQuery("update status set ac='"+AC_STATUS+"',lights='"+LIGHT_STATUS+"'");
        System.out.println(" Updated LIGHT STATUS:"+LIGHT_STATUS+"\nCurrent AC STATUS:"+AC_STATUS);
        con.close();
                    
    }   catch (Exception ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }

    private void switchON() {
           //RETRIEVE AC STATUS FROM DATABASE
          try{  
    Class.forName("oracle.jdbc.driver.OracleDriver");  
      Connection con=DriverManager.getConnection(  
    "jdbc:oracle:thin:@localhost:1521:xe","system","shubha");  
      Statement userbook=con.createStatement();
    ResultSet rs=userbook.executeQuery("select * from status");
    if(rs.next()){
        AC_STATUS=rs.getString(1);
        LIGHT_STATUS=rs.getString(2);
        System.out.println(" Current LIGHT STATUS:"+LIGHT_STATUS+"\nCurrent AC STATUS:"+AC_STATUS);
        jTextArea1.append("Current LIGHT STATUS:"+LIGHT_STATUS+"\nCurrent AC STATUS:"+AC_STATUS+"\n");
        con.close();
    }     
                 
    }   catch (Exception ex) {
            Logger.getLogger(Testing.class.getName()).log(Level.SEVERE, null, ex);
        }
          jTextArea1.append("\nACTIVITY DETECTED IN ROOM\n");  
          if(LIGHT_STATUS.compareTo("OFF")==0)
          {LIGHT_STATUS="ON";
         jTextArea1.append("LIGHTS: TURNED ON\n");  
          }
          if(AC_STATUS.compareTo("OFF")==0){
                AC_STATUS="ON";
           jTextArea1.append("AC STATUS: TURNED ON\n");
           jTextArea1.append("Climate control turned ON\n");
          STOPCLIMATE=false;
           new Fuzzy();
        
          }
           updateStatus();
        
        
    }

  



class Fuzzy {
    
    Fuzzy(){
    
    final double sensorData[][]={{16,20},{18,25},{20,28}};
        //for(int i=0;i<3;i++){
            Thread thread=new Thread(){
        @Override
        public void run() {
            super.run();
            while(Testing.STOPCLIMATE==false){
                try {
                    decideAction(sensorData[0][0]++,sensorData[0][1]++);
                    Thread.sleep(10000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Fuzzy.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
           
            
            };
      
          thread.start();
    
    }
    
    public void decideAction(double t, double h){
        int temp=(int)Math.round(t);
        if(temp<15) temp=15;
        else if(temp>40) temp=40;
        int humi=(int)Math.round(h);
        if(humi<10) humi=10;
        else if(humi>40) humi=40;
        
        //very low, low, high, very high
        double tempMemb[][]={{0.95,0.05,0.0,0.0},{0.85,0.15,0.0,0.0},{0.7,0.3,0.0,0.0},{0.6,0.4,0.0,0.0},
            {0.38,0.62,0.0,0.0},{0.26,0.74,0.0,0.0},{0.1,0.9,0.0,0.0},{0.0,1.0,0.0,0.0},{0.0,0.82,0.18,0.0},
            {0.0,0.76,0.24,0.0},{0.0,0.68,0.32,0.0},{0.0,0.42,0.58,0.0},{0.0,0.29,0.71,0.0},{0.0,0.09,0.91,0.0},
            {0.0,0.0,0.88,0.12},{0.0,0.0,0.82,0.18},{0.0,0.0,0.74,0.26},{0.0,0.0,0.52,0.48},{0.0,0.0,0.44,0.56},
            {0.0,0.0,0.26,0.74},{0.0,0.0,0.1,0.9},{0.0,0.0,0.0,1.0},{0.0,0.0,0.0,1.0},{0.0,0.0,0.0,1.0},
            {0.0,0.0,0.0,1.0},{0.0,0.0,0.0,1.0}
        };
        //dry, comfortable, humid, sticky
        double humiMemb[][]={{1.0,0.0,0.0,0.0},{0.95,0.05,0.0,0.0},{0.84,0.16,0.0,0.0},{0.78,0.22,0.0,0.0},
            {0.66,0.34,0.0,0.0},{0.62,0.38,0.0,0.0},{0.57,0.43,0.0,0.0},{0.42,0.56,0.02,0.0},{0.22,0.66,0.12,0.0},
            {0.09,0.58,0.33,0.0},{0.0,0.52,0.48,0.0},{0.0,0.41,0.59,0.0},{0.0,0.36,0.64,0.0},{0.0,0.11,0.8,0.09},
            {0.0,0.02,0.76,0.22},{0.0,0.0,0.5,0.5},{0.0,0.0,0.38,0.62},{0.0,0.0,0.19,0.81},{0.0,0.0,0.16,0.84},
            {0.0,0.0,0.11,0.89},{0.0,0.0,0.08,0.92},{0.0,0.0,0.06,0.94},{0.0,0.0,0.05,0.95},{0.0,0.0,0.02,0.98},
            {0.0,0.0,0.01,0.99},{0.0,0.0,0.0,1.0},{0.0,0.0,0.0,1.0},{0.0,0.0,0.0,1.0},{0.0,0.0,0.0,1.0},
            {0.0,0.0,0.0,1.0},{0.0,0.0,0.0,1.0}
        };
        
        //calculating firing strengths of rules
        double firingStrength[][]={{(tempMemb[temp-15][0]*humiMemb[humi-10][0]),0.0},
            {(tempMemb[temp-15][0]*humiMemb[humi-10][1]),0.0},
            {(tempMemb[temp-15][0]*humiMemb[humi-10][2]),0.0},
            {(tempMemb[temp-15][0]*humiMemb[humi-10][3]),0.3333},
            {(tempMemb[temp-15][1]*humiMemb[humi-10][0]),0.0},
            {(tempMemb[temp-15][1]*humiMemb[humi-10][1]),0.0},
            {(tempMemb[temp-15][1]*humiMemb[humi-10][2]),0.3333},
            {(tempMemb[temp-15][1]*humiMemb[humi-10][3]),0.6667},
            {(tempMemb[temp-15][2]*humiMemb[humi-10][0]),0.3333},
            {(tempMemb[temp-15][2]*humiMemb[humi-10][1]),0.6667},
            {(tempMemb[temp-15][2]*humiMemb[humi-10][2]),1.0},
            {(tempMemb[temp-15][2]*humiMemb[humi-10][3]),1.0},
            {(tempMemb[temp-15][3]*humiMemb[humi-10][0]),0.6667},
            {(tempMemb[temp-15][3]*humiMemb[humi-10][1]),1.0},
            {(tempMemb[temp-15][3]*humiMemb[humi-10][2]),1.0},
            {(tempMemb[temp-15][3]*humiMemb[humi-10][3]),1.0},
        };
        //choosing rule with max strength
        double sumStrength=0.0,sumValue=0.0,crispValue=1.0;
        for(int i=0;i<16;i++){
            sumStrength+=firingStrength[i][0]*firingStrength[i][1];
            sumValue+=firingStrength[i][1];
        }
        crispValue=sumStrength/sumValue;
        System.out.println("Crisp Value for AC "+crispValue+"\n");
       Testing.compressorSpeed=crispValue;
       jTextArea1.append("AC COMPRESSOR SPEED: "+compressorSpeed+"\n");
        
    }
 
    
}
}